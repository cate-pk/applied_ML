{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "E_AI01b_2019452068.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "YuZlu2KZWnO3"
      },
      "source": [
        "# E_AI 01b - Python Excercises\n",
        "\n",
        "\n",
        "> 학번:2019452068\n",
        ">\n",
        "> 이름:박규선\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "YfFxEoA_WnO4"
      },
      "source": [
        "\n",
        "## Google Colab 기본 사용법\n",
        "\n",
        "#### + Code cell\n",
        "\n",
        "  * Enter 혹은 더블 클릭 후 Python code 입력\n",
        "  * 코드 실행은 Shift + Enter 혹은 왼쪽의 플레이 버튼 클릭\n",
        "  * 코드 자동완성은 TAB\n",
        "\n",
        "#### + Text cell\n",
        "\n",
        "  * Markdown 혹은 HTML 사용\n",
        "  * 텍스트 입력 후 Shift + Enter\n",
        "  \n",
        "####   "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "9c16jRKNWnO5"
      },
      "source": [
        "## 1. Variables and data types"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "TPcBJMHCWnO5",
        "colab": {}
      },
      "source": [
        "a = 1\n",
        "b = 2\n",
        "c = 3\n",
        "d = True\n",
        "e = 'cool'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "NslHa6o9WnO8"
      },
      "source": [
        "### Exercise #1\n",
        "\n",
        "`a == e or d and c > b` 의 결과값과 데이터 타입은?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "C7sROjFkpL5E",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "affac6a3-fdb2-483e-d703-89d7f5cf7600"
      },
      "source": [
        "# Answer\n",
        "\n",
        "ex_1 = a == e or d and c > b \n",
        "print(ex_1)\n",
        "print(type(ex_1))"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n",
            "<class 'bool'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "cLKAZOkeWnO9"
      },
      "source": [
        "### Exercise #2\n",
        "\n",
        "`not a == e or d and not c > b` 의 결과값은?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "u0BTTZzElYqA",
        "outputId": "70f93232-04a9-4d7b-ec92-ad03bd6010ab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Answer\n",
        "\n",
        "print (not a == e or d and not c > b) "
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "QAZ5iqOGWnO-"
      },
      "source": [
        "## 2. Data Structures in Python\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "0fGoOVZ1WnO-",
        "colab": {}
      },
      "source": [
        "test = [ {'Arizona': 'Phoenix', 'California': 'Sacramento', 'Hawaii': 'Honolulu'},\n",
        "        1000, 2000, 3000, ['hat', 't-shirt', 'jeans', {'socks1': 'red', 'socks2': 'blue'}] ]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "2wgyv5VDWnPB"
      },
      "source": [
        "### Exercise #1: \n",
        "\n",
        "다음 item을 출력하세요.\n",
        "\n",
        "~~~~\n",
        "2000\n",
        "~~~~\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6WFT30-hwJ1K",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "a0670332-5412-4c8a-a241-66f7628a58ca"
      },
      "source": [
        "# Answer\n",
        "\n",
        "test[2] "
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "z-rA3JDAWnPB"
      },
      "source": [
        "### Exercise #2: \n",
        "\n",
        "다음 item을 출력하세요.\n",
        "\n",
        "~~~~\n",
        "{'Arizona': 'Phoenix', 'California': 'Sacramento', 'Hawaii': 'Honolulu'}\n",
        "~~~~\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "xUvoQUZ9wbQl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5f9c6118-d8c2-4910-e91f-377e8ee32a74"
      },
      "source": [
        "# Answer\n",
        "\n",
        "test[0] "
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Arizona': 'Phoenix', 'California': 'Sacramento', 'Hawaii': 'Honolulu'}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "k8N0XjjIWnPC"
      },
      "source": [
        "### Exercise #3: \n",
        "\n",
        "\n",
        "다음 item을 출력하세요.\n",
        "\n",
        "~~~~\n",
        "['hat', 't-shirt', 'jeans', {'socks1': 'red', 'socks2': 'blue'}]\n",
        "~~~~\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "qiA5l0oQwhk9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "faded343-6c40-48ca-b38e-079a7a194b17"
      },
      "source": [
        "# Answer\n",
        "\n",
        "test[4] "
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['hat', 't-shirt', 'jeans', {'socks1': 'red', 'socks2': 'blue'}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "80PoQdzFWnPD"
      },
      "source": [
        "### Exercise #4: \n",
        "\n",
        "다음 item을 출력하세요.\n",
        "\n",
        "~~~~\n",
        "'Phoenix'\n",
        "~~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Ep0zbo8FwndL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "1eab0fa3-62b2-43e6-e28a-0c786e64e18a"
      },
      "source": [
        "# Answer\n",
        "\n",
        "test[0]['Arizona'] "
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Phoenix'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "x1YNG2hVWnPE"
      },
      "source": [
        "### Exercise #5: \n",
        "\n",
        "다음 item을 출력하세요.\n",
        "\n",
        "~~~~\n",
        "'jeans'\n",
        "~~~~\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "odiaSpkZwyJD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "83ba32f3-ede7-4449-ff2f-c7ab15cb8d5f"
      },
      "source": [
        "# Answer\n",
        "\n",
        "test[4][2] "
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'jeans'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "aX_bUiDrWnPF"
      },
      "source": [
        "### Exercise #6: \n",
        "\n",
        "\n",
        "다음 item을 출력하세요.\n",
        "\n",
        "~~~~\n",
        "'blue'\n",
        "~~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "fTpNsoELw2AD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "27123641-37a7-4da4-fbd5-a70e569f0f29"
      },
      "source": [
        "# Answer\n",
        "\n",
        "test[4][3]['socks2']"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'blue'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "wKzfd4iqWnPF"
      },
      "source": [
        "## 3. Functions and methods\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "HlyUpITzWnPG",
        "colab": {}
      },
      "source": [
        "test_yourself = [1, 1, 10, 12, 30, 2, 2, 3, 3, 3, 3, 4, 5, 5]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "JAR7C15cWnPI"
      },
      "source": [
        "\n",
        "### Exercise #1:\n",
        "\n",
        "test_yourself의 평균을 구하세요.\n",
        "(built-in 함수인 len(), sum() 만 사용)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "XzSrfPUKxLIC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f8e4dd02-3e45-45fe-e211-ac86a7bbd7a9"
      },
      "source": [
        "# Answer\n",
        "\n",
        "average_ty = sum(test_yourself) / len(test_yourself)\n",
        "print(average_ty)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "6.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "jhE_fshqWnPJ"
      },
      "source": [
        "\n",
        "### Exercise #2:\n",
        "\n",
        "test_yourself의 중간값을 구하세요.\n",
        "(built-in 함수인 len(), sorted() 만 사용)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "qpvcytqDxWDs",
        "outputId": "81a46d5a-1c49-4b34-f537-01be18d304b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Answer\n",
        "\n",
        "test_y2 = sorted(test_yourself)\n",
        "test_len = len(test_yourself)\n",
        "\n",
        "median = (test_y2[test_len // 2 - 1] + test_y2[test_len // 2]) / 2\n",
        "median"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "-OF-gaj5WnPK"
      },
      "source": [
        "## 4. If statements"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "gJQJjurOWnPL"
      },
      "source": [
        "### Exercise #1:\n",
        "\n",
        "score의 점수에 따라 다음과 같은 결과를 출력하는 프로그램을 작성하세요.\n",
        "- 90~100점: A\n",
        "- 80~90점: B\n",
        "- 70~80점: C\n",
        "- 60~70점: D\n",
        "- 그 이하: F\n",
        "\n",
        "**실행 예)**\n",
        "\n",
        "~~~~\n",
        "B\n",
        "~~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "CRciwsIfWnPM",
        "colab": {}
      },
      "source": [
        "score = 85"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "F7druKGExu9y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "80729665-05d3-4d68-a21f-06350baa377c"
      },
      "source": [
        "# Answer\n",
        "\n",
        "if score >= 90:\n",
        "  grade = 'A'\n",
        "elif score >=80:\n",
        "  grade = 'B'\n",
        "elif score >=70:\n",
        "  grade = 'C'\n",
        "elif score >= 60:\n",
        "  grade = 'D'\n",
        "else :\n",
        "  grade = 'F'\n",
        "\n",
        "print(grade)"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "B\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "VtYOK7IvWnPO"
      },
      "source": [
        "## 5. Loops\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "R98KFPjpWnPP"
      },
      "source": [
        "### Exercise #1:\n",
        "\n",
        "scores의 모든 점수에 대해 다음과 같은 결과를 각각 출력하는 프로그램을 작성하세요.\n",
        "- 90~100점: A\n",
        "- 80~90점: B\n",
        "- 70~80점: C\n",
        "- 60~70점: D\n",
        "- 그 이하: F\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "**실행 예)**\n",
        "\n",
        "~~~~\n",
        "B\n",
        "F\n",
        "F\n",
        "C\n",
        "A\n",
        "~~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Qe9GI0apWnPQ",
        "colab": {}
      },
      "source": [
        "scores = [85, 56, 34, 79, 100]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "641mplnMnw1s",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        },
        "outputId": "d9ed1ac2-b87f-4a5b-8908-7ec9158b7ad6"
      },
      "source": [
        "# Answer\n",
        "\n",
        "for i in scores:\n",
        "  if i >= 90:\n",
        "    print('A')\n",
        "  elif i >=80:\n",
        "    print('B')\n",
        "  elif i >=70:\n",
        "    print('C')\n",
        "  elif i >= 60:\n",
        "    print('D')\n",
        "  else :\n",
        "    print('F')\n",
        " "
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "B\n",
            "F\n",
            "F\n",
            "C\n",
            "A\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "_BufMScVWnPS"
      },
      "source": [
        "### Exercise #2:\n",
        "\n",
        "students 딕셔너리의 각 학생의 점수에 대해 다음과 아래와 같이 출력하는 프로그램을 작성하세요.\n",
        "- 90~100점: A\n",
        "- 80~90점: B\n",
        "- 70~80점: C\n",
        "- 60~70점: D\n",
        "- 그 이하: F\n",
        "\n",
        "---\n",
        "\n",
        "**실행 예)**\n",
        "\n",
        "~~~~\n",
        "Kim's grade: A\n",
        "Lee's grade: D\n",
        "Park's grade: C\n",
        "~~~~\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "fsVCUZalWnPS",
        "colab": {}
      },
      "source": [
        "students = [{'name':'Kim', 'score':91}, {'name':'Lee', 'score':64}, {'name':'Park', 'score':78}]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "egly8TtUn1lA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "67ad4669-27f7-4731-bc6f-e5649574fe00"
      },
      "source": [
        "# Answer\n",
        "for i in students:\n",
        "  if i['score'] >= 90:\n",
        "    print(i['name']+\"'s grade: \"+'A')\n",
        "  elif i['score'] >=80:\n",
        "    print(i['name']+\"'s grade: \"+'B')\n",
        "  elif i['score'] >=70:\n",
        "    print(i['name']+\"'s grade: \"+'C')\n",
        "  elif i['score'] >= 60:\n",
        "    print(i['name']+\"'s grade: \"+'D')\n",
        "  else :\n",
        "    print(i['name']+\"'s grade: \"+'F')"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Kim's grade: A\n",
            "Lee's grade: D\n",
            "Park's grade: C\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "B9KK4VbOWnPV"
      },
      "source": [
        "### Exercise #3:\n",
        "\n",
        "주어진 my_string의 값을 다음과 같은 피라미드 모양으로 출력하는 프로그램을 작성하세요.\n",
        "\n",
        "---\n",
        "\n",
        "실행 예)\n",
        "\n",
        "~~~~\n",
        "p\n",
        "py\n",
        "pyt\n",
        "pyth\n",
        "pytho\n",
        "python\n",
        "pytho\n",
        "pyth\n",
        "pyt\n",
        "py\n",
        "p\n",
        "~~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "oMau2dKUWnPW",
        "colab": {}
      },
      "source": [
        "my_string = 'python'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "AUhFuYtTn2a-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "outputId": "6c240298-b474-4040-e525-5749cb283bae"
      },
      "source": [
        "# Answer\n",
        "\n",
        "for i in range(len(my_string)):\n",
        "  print(my_string[:i+1])\n",
        "\n",
        "for i in reversed(range(len(my_string))):\n",
        "  print(my_string[:i-1])"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "p\n",
            "py\n",
            "pyt\n",
            "pyth\n",
            "pytho\n",
            "python\n",
            "pyth\n",
            "pyt\n",
            "py\n",
            "p\n",
            "\n",
            "pytho\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "4F49FGYBWnPZ"
      },
      "source": [
        "### Exercise #4:\n",
        "\n",
        "사용자의 나이를 맞추는 프로그램을 작성하세요.\n",
        "\n",
        "프로그램은 사용자에게 다음과 같은 방식으로 추측만 할 수 있고: \n",
        "- 'Are you 67 years old?'\n",
        "\n",
        "사용자는 다음 3가지 답변만 할 수 있음: \n",
        "- less\n",
        "- more\n",
        "- yes\n",
        "\n",
        "총 10번의 추측 안에 맞추지 못하면 종료\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "실행 예)\n",
        "~~~~\n",
        "Are you 50 years old? (less/more/yes) > less\n",
        "Are you 25 years old? (less/more/yes) > less\n",
        "Are you 12 years old? (less/more/yes) > more\n",
        "Are you 18 years old? (less/more/yes) > more\n",
        "Are you 21 years old? (less/more/yes) > less\n",
        "Are you 19 years old? (less/more/yes) > yes\n",
        "Bingo!\n",
        "~~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "LboYztojWnPZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "outputId": "823cd1e3-f374-4812-c927-8c9d66d87005"
      },
      "source": [
        "# Answer\n",
        "\n",
        "upper_age = 100\n",
        "lower_age = 0\n",
        "computed_age = (upper_age - lower_age) // 2 + lower_age\n",
        "\n",
        "for i in range(10):\n",
        "    question = input(\"Are you \"+str(computed_age)+\" years old? (less/more/yes) > \")\n",
        "\n",
        "    if question == \"less\":\n",
        "        upper_age = computed_age\n",
        "    elif question == \"more\":\n",
        "        lower_age = computed_age\n",
        "    elif question == \"yes\":\n",
        "        print(\"Bingo!\")\n",
        "        break\n",
        "    \n",
        "    computed_age = (upper_age - lower_age) // 2 + lower_age"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Are you 50 years old? (less/more/yes) > less\n",
            "Are you 25 years old? (less/more/yes) > less\n",
            "Are you 12 years old? (less/more/yes) > more\n",
            "Are you 18 years old? (less/more/yes) > more\n",
            "Are you 21 years old? (less/more/yes) > less\n",
            "Are you 19 years old? (less/more/yes) > yes\n",
            "Bingo!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "HVMvpQsbja4Q"
      },
      "source": [
        "### Exercise #5:\n",
        "\n",
        "\n",
        "![](http://kfem.or.kr/wp-content/uploads/2018/12/AQI.png)\n",
        "\n",
        "\n",
        "주어진 테이블을 토대로 각각의 등급을 반환하는 다음 함수를 작성하세요: \n",
        "\n",
        "- **get_aqi_pm10()**\n",
        "- **get_aqi_pm25()**\n",
        "\n",
        "\n",
        "등급은 다음과 같이 int로 반환\n",
        "(테이블 범위를 초과하는 값은 5로 반환)\n",
        "\n",
        "\n",
        "- 1 - Good\n",
        "- 2 - Moderate\n",
        "- 3 - Unhealty for Sensitive Groups\n",
        "- 4 - Unhealty\n",
        "- 5 - Very Unhealty\n",
        "\n",
        "---\n",
        "\n",
        "**실행 예)**\n",
        "~~~~\n",
        "1\n",
        "2\n",
        "5\n",
        "2\n",
        "\n",
        "1\n",
        "2\n",
        "3\n",
        "5\n",
        "~~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "R_HemxxJj5Mv",
        "colab": {}
      },
      "source": [
        "# Answer\n",
        "\n",
        "def get_aqi_pm10(value):\n",
        "    \n",
        "    if value <= 54:\n",
        "        return 1\n",
        "    elif value <= 154:\n",
        "        return 2\n",
        "    elif value <= 254:\n",
        "        return 3\n",
        "    elif value <= 354:\n",
        "        return 4\n",
        "    else :\n",
        "        return 5 # edit this"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "KarxCidTj49i",
        "colab": {}
      },
      "source": [
        "# Answer\n",
        "\n",
        "def get_aqi_pm25(value):\n",
        "\n",
        "    if value < 12:\n",
        "        return 1\n",
        "    elif value <= 35:\n",
        "        return 2\n",
        "    elif value <= 55:\n",
        "        return 3\n",
        "    elif value <= 150:\n",
        "        return 4\n",
        "    else :\n",
        "        return 5 # edit this"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "zRoN7tbkjc59",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "e7b3396d-ac8e-4a22-9985-bfb894f72d8d"
      },
      "source": [
        "print( get_aqi_pm10(50) )\n",
        "print( get_aqi_pm10(100) )\n",
        "print( get_aqi_pm10(400) )\n",
        "print( get_aqi_pm10(55), end='\\n\\n' )\n",
        "\n",
        "print( get_aqi_pm25(3) )\n",
        "print( get_aqi_pm25(12) )\n",
        "print( get_aqi_pm25(55) )\n",
        "print( get_aqi_pm25(300) )\n"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "2\n",
            "5\n",
            "2\n",
            "\n",
            "1\n",
            "2\n",
            "3\n",
            "5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "jnBGPkEbkH0-"
      },
      "source": [
        "### Exercise #6:\n",
        "\n",
        "현재 pm2.5, pm10 수치를 가져오는 **get_pm()** 함수와\n",
        "\n",
        "Exercise #5에서 완성한 **get_aqi_pm25()**, **get_aqi_pm10()**을 이용하여 \n",
        "\n",
        "현재 대기 지수 AQI를 다음과 같이 출력하는 프로그램을 완성하세요.\n",
        "\n",
        "AQI는 pm 2.5와 pm 10 중에서 더 안좋은 결과를 출력하도록 함\n",
        "\n",
        "---\n",
        "\n",
        "**실행 예)**\n",
        "\n",
        "\n",
        "~~~~\n",
        "pm 2.5 = 72, pm 10 = 109\n",
        "현재 대기지수 AQI는: Unhealty 입니다.\n",
        "~~~~\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "mywHQE24kIh9",
        "colab": {}
      },
      "source": [
        "from bs4 import BeautifulSoup\n",
        "import urllib.request as req\n",
        "\n",
        "def get_pm():\n",
        "\n",
        "    url1 = 'https://search.naver.com/search.naver?where=nexearch&sm=tab_etc&query=%EC%A0%84%EA%B5%AD%EC%B4%88%EB%AF%B8%EC%84%B8%EB%A8%BC%EC%A7%80'\n",
        "    selector1 = '#main_pack > div.content_search.section._atmospheric_environment > div > div.contents03_sub > div > div:nth-of-type(3) > div.main_box > div.detail_box > div.tb_scroll > table > tbody > tr:nth-of-type(1) > td:nth-of-type(1) > span'\n",
        "\n",
        "    url2 = 'https://search.naver.com/search.naver?where=nexearch&sm=tab_etc&query=%EC%A0%84%EA%B5%AD%EB%AF%B8%EC%84%B8%EB%A8%BC%EC%A7%80'\n",
        "    selector2 = '#main_pack > div.content_search.section._atmospheric_environment > div > div.contents03_sub > div > div:nth-of-type(3) > div.main_box > div.detail_box > div.tb_scroll > table > tbody > tr:nth-of-type(1) > td:nth-of-type(1) > span'\n",
        "\n",
        "    # pm 2.5\n",
        "    res = req.urlopen(url1)\n",
        "    soup = BeautifulSoup(res, 'html.parser')\n",
        "    elem = soup.select_one(selector1)\n",
        "    pm25 = int(elem.text)\n",
        "    \n",
        "    \n",
        "    # pm 10\n",
        "    res = req.urlopen(url2)\n",
        "    soup = BeautifulSoup(res, 'html.parser')\n",
        "    elem = soup.select_one(selector2)\n",
        "    pm10 = int(elem.text)\n",
        "\n",
        "    return (pm25, pm10)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "49FfTYDRkO29",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "bd9cf6c4-42f4-4630-fb12-18c10cb7ae62"
      },
      "source": [
        "# Answer\n",
        "\n",
        "aqi_label = {1:'Good', 2:'Moderate', 3:'Unhealty for Sensitive Group', 4:'Unhealty', 5:'Very Unhealty'}\n",
        "\n",
        "pm25, pm10 = get_pm()\n",
        "\n",
        "print(pm25, pm10)\n",
        "\n",
        "index25 = get_aqi_pm25( pm25 )\n",
        "index10 = get_aqi_pm10( pm10 )\n",
        "\n",
        "\n",
        "# do something\n",
        "if index25 >= index10 :\n",
        "  quality = index25\n",
        "elif index25 <= index10 :\n",
        "  quality = index10\n",
        "\n",
        "quality_2 = aqi_label[int(quality)]\n",
        "\n",
        "print('pm 2.5 = {}, pm 10 = {}'.format(pm25, pm10) )\n",
        "print('현재 대기지수 AQI는: {} 입니다.'.format(quality_2) ) # edit this"
      ],
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10 38\n",
            "pm 2.5 = 10, pm 10 = 38\n",
            "현재 대기지수 AQI는: Good 입니다.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CS6HvzoAY79J",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}